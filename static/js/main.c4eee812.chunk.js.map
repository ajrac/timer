{"version":3,"sources":["reportWebVitals.ts","Helpers/CalculateTimer.ts","Components/Controls/Controls.tsx","Components/Main/Main.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateTimer","timeSeconds","hours","Math","floor","minutes","seconds","Controls","props","setTimeSeconds","useState","intervalID","setIntervalID","className","onClick","interval","setInterval","previousState","clearInterval","Main","timerArray","setTimerArray","useEffect","timeArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAceA,G,KAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,aCQCQ,MAjBf,SAAwBC,GACpB,IAAIC,EAAgBC,KAAKC,MAAMH,EAAY,MACvCI,EAAkBF,KAAKC,OAAOH,EAAqB,KAANC,GAAa,IAC1DI,EAAkBH,KAAKC,MAAMH,EAAqB,KAANC,EAAuB,GAARG,GAO/D,MAAO,CALWH,EAAQ,GAAR,WAAiBA,GAAUA,EACzBG,EAAU,GAAV,WAAmBA,GAAYA,EAC/BC,EAAU,GAAV,WAAmBA,GAAYA,I,eC0BxCC,MA1Bf,SAAkBC,GACd,IAAOC,EAAkBD,EAAlBC,eACP,EAAoCC,mBAAiB,GAArD,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,0BAASC,UAAY,qBAArB,UACI,wBAAQC,QAfU,WACtB,IAAIC,EAAeC,aAAY,WAC3BP,GAAe,SAACQ,GAAD,OAAwBA,EAAc,OACtD,KACHL,EAAcG,IAWV,mBACA,wBAAQD,QAVU,WACtBI,cAAcP,IASV,mBACA,wBAAQG,QARU,WACtBI,cAAcP,GACdF,EAAe,IAMX,uBCFGU,MArBf,WACI,MAAsCT,mBAAiB,GAAvD,mBAAOT,EAAP,KAAoBQ,EAApB,KACA,EAAoCC,mBAA+B,IAAnE,mBAAOU,EAAP,KAAmBC,EAAnB,KAKA,OAJAC,qBAAU,WACN,IAAIC,EAAiCvB,EAAeC,GACpDoB,EAAcE,KACf,CAACtB,IAEA,iCACI,0BAASY,UAAY,iBAArB,UACI,mBAAGA,UAAY,aAAf,SAA6BO,EAAW,KACxC,qCACA,mBAAGP,UAAY,aAAf,SAA6BO,EAAW,KACxC,qCACA,mBAAGP,UAAY,aAAf,SAA6BO,EAAW,QAE5C,cAAC,EAAD,CAAUX,eAAkBA,QCfxCe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrC,M","file":"static/js/main.c4eee812.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","function calculateTimer(timeSeconds: number): Array<number|string>{\r\n    let hours: number = Math.floor(timeSeconds/3600);\r\n    let minutes: number = Math.floor((timeSeconds - (hours*3600))/60);\r\n    let seconds: number = Math.floor(timeSeconds - (hours*3600) - (minutes*60));\r\n    \r\n    let hoursFormat = hours < 10 ? `0${hours}` : hours;\r\n    let minutesFormat = minutes < 10 ? `0${minutes}` : minutes;\r\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n\r\n    return [\r\n        hoursFormat,\r\n        minutesFormat,\r\n        secondsFormat\r\n    ];\r\n}\r\n\r\nexport default calculateTimer;","import React, {useState} from \"react\";\r\nimport './Controls.css';\r\n\r\ntype Props = {\r\n    setTimeSeconds: Function\r\n};\r\n\r\nfunction Controls(props:any){\r\n    const {setTimeSeconds} = props;\r\n    const [intervalID, setIntervalID] = useState<number>(0);\r\n\r\n    const handleStartButton = () => {\r\n        let interval:any = setInterval(() => {\r\n            setTimeSeconds((previousState:number)=>previousState+1)\r\n        }, 1000)\r\n        setIntervalID(interval);\r\n    }\r\n    const handlePauseButton = () => {\r\n        clearInterval(intervalID);\r\n    }\r\n    const handleResetButton = () => {\r\n        clearInterval(intervalID);\r\n        setTimeSeconds(0);\r\n    }\r\n    return(\r\n        <section className = 'controls-container'>\r\n            <button onClick={handleStartButton}>Start</button>\r\n            <button onClick={handlePauseButton}>Pause</button>\r\n            <button onClick={handleResetButton}>Reset</button>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Controls;","import React, {useState, useEffect} from 'react';\r\nimport './Main.css';\r\nimport calculateTimer from '../../Helpers/CalculateTimer';\r\nimport Controls from '../Controls/Controls';\r\n\r\nfunction Main(){\r\n    const [timeSeconds, setTimeSeconds] = useState<number>(0);\r\n    const [timerArray, setTimerArray] = useState<Array<number|string>>([]);\r\n    useEffect(() =>{\r\n        let timeArray:Array<number|string> = calculateTimer(timeSeconds);\r\n        setTimerArray(timeArray);\r\n    }, [timeSeconds]);\r\n    return(\r\n        <main>\r\n            <section className = 'time-container'>\r\n                <p className = 'timer-text'>{timerArray[0]}</p>\r\n                <span>:</span>\r\n                <p className = 'timer-text'>{timerArray[1]}</p>\r\n                <span>:</span>\r\n                <p className = 'timer-text'>{timerArray[2]}</p>\r\n            </section>\r\n            <Controls setTimeSeconds = {setTimeSeconds}/>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport Main from './Components/Main/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main></Main>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}